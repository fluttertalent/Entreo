@page "/Test/Pushnotification"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<li><button @onclick="Test">Test</button></li>
<li><button @onclick="Test2">Test2</button></li>
@* <li><button @onclick="subscribePushNotification">Subscribe</button></li>
<li><button @onclick="unsubscribePushNotification">Unsubscribe</button></li>
 *@

<div>Native push notifications:</div>
<NotificationHandler />
<div>isPermission: @isPermission</div>

<div>Push notifications using Firebase:</div>
<NotificationHandlerFirebase />

@if (subscription != null)
{
    <p role="status">endpoint: @subscription.Url</p>
    <p role="status">p256dh: @subscription.P256dh</p>
    <p role="status">auth: @subscription.Auth</p>
}

@code {

    private NotificationSubscription subscription;
    private bool isPermission;

    public async Task Test()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
                new Promise((resolve, reject) => {
                    const script = document.createElement('script');
                    script.src = 'test.js';
                    script.onload = resolve;
                    script.onerror = reject;
                    document.head.appendChild(script);
                });
            ");
        // await JSRuntime.InvokeVoidAsync("eval", @"                
        //         const script = document.createElement('script');
        //         script.src = 'test.js';
        //         script.onload = resolve;
        //         script.onerror = reject;
        //         document.head.appendChild(script);
        //     ");

        //await JSRuntime.InvokeVoidAsync("func1.func1();");

    }
    public async Task Test2()
    {
        await JSRuntime.InvokeVoidAsync("func2();");

    }

    public async Task subscribePushNotification()
    {
        subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");

        if (subscription is not null)
        {
            isPermission = true;
            try
            {                
                subscription.NotificationSubscriptionId = 1;
                subscription.UserId = "anonymous";

                await CustomHttpHelper.PostAsync("WebPush/subscribe", subscription);
            }
            catch (System.Net.Http.HttpRequestException ex)
            {
            }
        }
    }

    public async Task unsubscribePushNotification()
    {
        isPermission = await JSRuntime.InvokeAsync<bool>("blazorPushNotifications.cancelSubscription");
        if (isPermission)
        {
            await CustomHttpHelper.PostAsync("WebPush/unsubscribe", subscription);
        }
    }
}
